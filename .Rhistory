source("https://bioconductor.org/biocLite.R")
biocLite("affy")
source("https://bioconductor.org/biocLite.R")
biocLite("gcrma")
source("https://bioconductor.org/biocLite.R")
biocLite("arrayQualityMetrics")
setwd("C:/Users/xNesTea/python/project sem 3/cel_files/data/correct_files")
library(gcrma)
library(arrayQualityMetrics)
Data <- ReadAffy() ##read data in working directory
eset <- gcrma(Data)
setwd("C:/Users/xNesTea/python/project sem 3/cel_files/data/correct_files")
setwd("C:/Users/xNesTea/python/project_sem_3/cel_files/data/correct_files")
setwd("C:/Users/xNesTea/python/project_sem_3/cel_files/data/correct_files")
setwd("C:/Users/xNesTea/python/project_sem_3/cel_files/data/correct_files")
library(piano)
library("piano")
library("piano")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("piano", version = "3.8")
### install necessary packages
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2", version = "3.8")
### set working directory to the folder containg data files (matadata and so on)
setwd("project_HT/Scripts/")
### set working directory to the folder containg data files (matadata and so on)
setwd("./High-throughput-analysis/")
### read table with number of reads for genes in form of matrix
counts <- as.matrix(read.csv(file = "raw/genes.raw.htseq2.tsv",sep = "\t", row.names = 1))
### read table with number of reads for genes in form of matrix
counts <- as.matrix(read.csv(file = "genes.raw.htseq2.tsv",sep = "\t", row.names = 1))
### read in metadata file and restrict it to data we are interested in
### also drop technical duplicates since there are not present in count matrix
metadata <- read.csv("E-MTAB-2328.sdrf.txt", sep = "\t")
metadata <- subset(metadata, Characteristics.developmental.stage. %in% c("embryonic day 15.5", "postnatal day 29"))
metadata <- subset(metadata, Characteristics.organism.part. %in% c("liver"))
metadata <- metadata[!duplicated(metadata$Assay.Name),]
### get sample names we are interested in from restricted metadata
### and restrict our read count matrix t only have samples we are interested in
list_of_names <- metadata$Scan.Name
list_of_names <- substr(list_of_names, start = 1, stop = 6)
counts <- counts[, colnames = colnames(counts) %in% c(list_of_names)]
#to be continued
### perform DESeq analysis
deseq <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~Characteristics.developmental.stage.)
analysis <- DESeq(deseq)
### visualizing results to be clearly visible.
res = results(analysis,
contrast=c("Characteristics.developmental.stage.","embryonic day 15.5","postnatal day 29"),
lfcThreshold = 0,altHypothesis="greaterAbs",
alpha = 0.01)
write.table(res ,file = "DESEQ2_out.txt", sep = "\t",row.names = T,col.names = NA)
library(piano)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt", version = "3.8")
View(counts)
rownames(counts)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mouse_gene_ids <- rownames(counts)
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
filters = 'mgi_symbol',
values = mouse_gene_ids,
mart = ensembl)
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mouse_gene_ids <- rownames(counts)
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
filters = 'mgi_symbol',
values = mouse_gene_ids,
mart = ensembl)
View(foo)
df <- [,rownames(counts)]
df <- [rownames(counts),]
df <- df[,rownames(counts)]
df <- df[rownames(counts),]
df <- data.frame[rownames(counts),]
df <- data.frame([rownames(counts),])
View(counts)
df <- as.data.frame([rownames(counts),])
df <- as.data.frame(rownames(counts))
View(df)
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mouse_gene_ids <- df
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
filters = 'mgi_symbol',
values = mouse_gene_ids,
mart = ensembl)
View(ensembl)
View(foo)
df <- as.data.frame(rownames(counts))
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mouse_gene_ids <- df
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
filters = 'mgi_symbol',
values = mouse_gene_ids,
mart = ensembl)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mouse_gene_ids <- df
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
mart = ensembl)
View(foo)
df <- as.data.frame(rownames(counts))
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mouse_gene_ids <- df
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
filters= "mgi_symbol"  ,mart=mouse)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mouse_gene_ids <- df
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
filters= "mgi_symbol"  ,mart=ensembl)
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mouse_gene_ids <- df
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name')
,mart=ensembl)
View(foo)
DE <- =read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
View(DE)
ens2gene <- read.delim("Ensembl2gene.tsv", row.names = 2, stringsAsFactors = F)
ens2gene <- read.delim(file = "Ensembl2gene.tsv", row.names = 2, stringsAsFactors = F)
ens2gene <- read.delim(file = "Ensembl2gene.tsv.txt", row.names = 2, stringsAsFactors = F)
ens2gene <- read.delim(file = "Ensembl2gene.tsv.txt", row.names = 2, stringsAsFactors = F)
View(ens2gene)
DE[,"Gene"]=map_gene[row.names(DE),"Gene"]
### read in the table for mapping ensembl to gene symbol
map_gene <- read.delim(file = "Ensembl2gene.tsv.txt", row.names = 2, stringsAsFactors = F)
DE[,"Gene"]=map_gene[row.names(DE),"Gene"]
View(DE)
row.names(DE)
DE[,"Gene"] <- map_gene[row.names(DE),"Gene"]
View(DE)
View(DE)
map_gene[,"Gene"]
map_gene[row.names(DE),"Gene"]
DE
library(piano)
### read in the file from DESeq2
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
### read in the table for mapping ensembl to gene symbol
map_gene <- read.delim(file = "Ensembl2gene.tsv.txt", row.names = 2, stringsAsFactors = F)
View(map_gene)
View(DE)
DE[,"Gene"] <- map_gene[row.names(DE),"Gene"]
View(DE)
DE <- DE[!is.na(DE$Gene),] #Excludes Ensembl ids without corresponding gene symbols
### read in the table for mapping ensembl to gene symbol
map_gene <- read.delim(file = "Ensembl2gene.tsv.txt", row.names = 2, stringsAsFactors = F)
View(map_gene)
DE[,"Gene"] <- map_gene[row.names(DE),DE$Gene]
### read in the file from DESeq2
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
DE[,"Gene"] <- map_gene[row.names(DE),DE$Gene]
View(DE)
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
### read in the table for mapping ensembl to gene symbol
map_gene <- read.delim(file = "Ensembl2gene.tsv.txt", row.names = 2, stringsAsFactors = F)
DE$Gene <- map_gene$Gene[match(rownames(DE), rownames(map_gene))]
View(DE)
rownames(map_gene)
rownames(DE)
rownames(map_gene)
gsub("ENSMUSG", "ENSG", rownames(DE))
View(DE)
DE <- gsub("ENSMUSG", "ENSG", rownames(DE))
### read in the file from DESeq2
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
DE <- gsub("ENSMUSG", "ENSG", rownames(DE))
### read in the file from DESeq2
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
View(DE)
gsub("ENSMUSG", "ENSG", rownames(DE))
rownames(DE) <- gsub("ENSMUSG", "ENSG", rownames(DE))
View(DE)
DE[,"Gene"] <- map_gene[row.names(DE), "Gene"]
View(DE)
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
foo <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
mart = ensembl)
View(foo)
map_gene <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
mart = ensembl)
View(map_gene)
colnames(map_gene)[colnames(map_gene)=="ensembl_gene_id"] <- "Gene"
map_gene
map_gene <- map_gene[,-1]
rownames(map_gene) <- map_gene[,1]
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
map_gene <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
mart = ensembl)
colnames(map_gene)[colnames(map_gene)=="ensembl_gene_id"] <- "Gene"
map_gene2 <- map_gene[,-1]
rownames(map_gene2) <- map_gene[,1]
rownames(map_gene) <- map_gene[,1]
View(map_gene)
View(map_gene)
map_gene[,1] <- NULL
View(map_gene)
library(piano)
### read in the file from DESeq2
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
DE$Gene <- map_gene$Gene[match(rownames(DE), rownames(map_gene))]
DE[,"Gene"] <- map_gene[row.names(DE), "Gene"]
View(DE)
DE[,"Gene"] <- map_gene[row.names(DE), "Gene"]
DE$Gene <- map_gene$Gene[match(rownames(DE), rownames(map_gene))]
View(DE)
colnames(map_gene)[colnames(map_gene)=="external_gene_name"] <- "Gene"
View(map_gene)
DE[,"Gene"] <- map_gene[row.names(DE), "Gene"]
View(DE)
DE <- DE[!is.na(DE$Gene),] #Excludes Ensembl ids without corresponding gene symbols
DE=DE[!duplicated(DE$Gene),] #A gene symbol may be associated with different Ensembl ids, and some Ensembl ids have no associated gene symbol.
library(biomaRt)
### table for mapping ensembl to gene symbol
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
map_gene <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
mart = ensembl)
colnames(map_gene)[colnames(map_gene)=="external_gene_name"] <- "Gene"
rownames(map_gene) <- map_gene[,1]
map_gene[,1] <- NULL
library(piano)
### read in the file from DESeq2
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
DE[,"Gene"] <- map_gene[row.names(DE), "Gene"]
DE <- DE[!is.na(DE$Gene),] #Excludes Ensembl ids without corresponding gene symbols
DE=DE[!duplicated(DE$Gene),] #A gene symbol may be associated with different Ensembl ids, and some Ensembl ids have no associated gene symbol.
row.names(DE)=DE$Gene #Assigns the gene symbols as row names of DESeqout
View(DE)
View(DE)
DE=DE[ ,c('log2FoldChange','pvalue')]
pval= as.matrix(DE[ ,2]) #extract P as a matrix
fc= as.matrix(DE[ ,1])  #extract fold changes as a matrix
row.names(fc)=row.names(DE)
DE=DE[ ,c('log2FoldChange','pvalue')]
pval= as.matrix(DE[ ,2]) #extract P as a matrix
lfc= as.matrix(DE[ ,1])  #extract fold changes as a matrix
row.names(pval)=row.names(DE)
row.names(lfc)=row.names(DE)
View(pval)
pval[is.na (pval)] <- 1
lfc[is.na (lfc)] <- 0
View(fc)
library(biomaRt)
### table for mapping ensembl to gene symbol
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
map_gene <- getBM(attributes=c('ensembl_gene_id',
'external_gene_name'),
mart = ensembl)
colnames(map_gene)[colnames(map_gene)=="external_gene_name"] <- "Gene"
map_gene$Gene <- toupper(map_gene$Gene)
rownames(map_gene) <- map_gene[,1]
map_gene[,1] <- NULL
library(piano)
### read in the file from DESeq2
DE <- read.delim(file="DESEQ2_out.txt", row.names = 1, stringsAsFactors = F)
DE[,"Gene"] <- map_gene[row.names(DE), "Gene"]
DE <- DE[!is.na(DE$Gene),] #Excludes Ensembl ids without corresponding gene symbols
DE=DE[!duplicated(DE$Gene),] #A gene symbol may be associated with different Ensembl ids, and some Ensembl ids have no associated gene symbol.
row.names(DE)=DE$Gene #Assigns the gene symbols as row names of DESeqout
DE=DE[ ,c('log2FoldChange','pvalue')]
pval= as.matrix(DE[ ,2]) #extract P as a matrix
lfc= as.matrix(DE[ ,1])  #extract fold changes as a matrix
row.names(pval)=row.names(DE)
row.names(lfc)=row.names(DE)
pval[is.na (pval)] <- 1
lfc[is.na (lfc)] <- 0
View(lfc)
gset=loadGSC("../../Data/Mus_musculus_GSEA_GO_sets_all_symbols_April_2015.gmt")
#Main function in PIANO. Uses the pvalues, fold-changes, and gene sets.
#Assigns FDR as multiple hypothesis correction method
gsaRes <- runGSA(pval,lfc,gsc=gset, nPerm = 1000, adjMethod = "fdr")
#Writes the output from PIANO to a file "piano.txt". Setting "save=FALSE" simply shows the result from PIANO
GSAsummaryTable(gsaRes, save=TRUE, file="piano.txt")
